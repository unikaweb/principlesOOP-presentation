<?php

// Любую еду можно съесть
class Food
{
    public function eat()
    {
    }

    public function __toString()
    {
        return "еду";
    }
}

// Теперь повар может приготовить не абстрактную еду
class Cook
{
    // В аргументах указываем, что повар принимает объект со свойствами абстрактного класса "еда"
    public function makeFood(Food $food)
    {
        return $food;
    }
}

class Student
{
    // Аналогично повару
    public function eatFood(Food $food)
    {
        // Выведем на экран что съел студент
        echo 'Студент съел ' . $food . '<br/>';
    }
}

// Мы создаем повара, который будет готовить
$cook = new Cook();
// И вызываем у повара метод приготовления блюда, передавая в аргументы конкретное блюдо
$soup = $cook->makeFood(new Soup());
$potato = $cook->makeFood(new PotatoFree());

// Теперь студент может съесть этот суп, но сначала нужно создать студента
// Создаем 2х студентов
$student1 = new Student();
$student2 = new Student();
// Первый съест суп, второй картошку
$student1->eatFood($soup);
$student2->eatFood($potato);


// Т.к. абстрактную еду нельзя приготовить, мы создаем определнное блюдо, которое может приготовить наш повар
// Т.к. блюдо - все равно еда и с ним можно сделать все тоже, что и с любой другой едой,
// мы указываем, что наше блюдо наследует всё, что есть у абстрактной еды

/**
 * Создаем конкретное блюдо картошка и наследуемся от абстрактного "еда"
 */
class PotatoFree extends Food
{
    // Для наглядности добавим функцию, которая выводит строку при прямом обращении к классу
    public function __toString()
    {
        return "картошка фри";
    }
}

class Soup extends Food
{
    public function __toString()
    {
        return "суп";
    }
}
